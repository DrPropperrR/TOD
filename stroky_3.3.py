# вывод текста
s = 'Hello world'
print(s)

# вывод длины текста (кол-во символов строки)
print(len(s))

# оператор проверки вхождения подстроки в строку
print('ello' in s)
print('3443' in s)

# конкатенация (склеивание строк)
print('ABC' + 'DIF')

# добавление в конец последовательности
s1 = 'Начало'
s1 += 'Конец'
print(s1)

# повторение строки путем умножения (повторная конкатенация)
print(s*3)

# дублирование с присвоением
s1 *= 4
print(s1)

# отбрасывание проблельных символов из начала и конца строки
print('   \n \r\v   \t    fsdafsadfsafsfsdf        \r '.strip())
print('       fsdafsadfsafsfsdf         '.rstrip())
print('       fsdafsadfsafsfsdf         '.lstrip())

# разбиение строки на подстроки и создание из них списка (кортежа)
sw = 'num1 \nnum2\nnum3'
print(sw.split('\n'))

# добавление лимита по разбиению строки
print(sw.split('\n', 1))

# базово функция сплит делает кортедж использую пробельные символы, причем рядом стоящие пробелы рассматривает как один
sw2 = 'hello      hello    hello'
print(sw2.split())

# при этом если сплит работает, например, по ',' то рядом стоящие такие символы он рассматривает как разные
sw3 = 'hello,,,,,,hello'
print(sw3.split(','))

# splitlines() работает как split с параметром '\n', тоесть делает список из последовательностей строк
print(sw.splitlines())

# splitlines() с параметром True включает в список символы переноса строки '\n'
print(sw.splitlines(True))

# сборка строки из подстрок с помощью join с возможностью вставить символ между подстроками в итоговой строке
print('=>'.join(['num1', 'num2', 'num3']))
print(' '.join(['num1', 'num2', 'num3']))

# функция list позволяет разбить строку на список, где каждый символ строки станет отдельным элементом списка
# разобьем фразу ниже
print(list('Hello world'))

# соберем ее обратно с помощье join
print(''.join(['H', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']))

# изменение регистра с помощью специальных команд
# все символы делает прописными
print('строка'.upper())

# все символы делает строчными
print('СТРОКА'.lower())

# меняет регистр каждлого символа - большие стали маленькими, а маленькме большими
print('СТРОКА строка'.swapcase())

# делает первую букву прописной
print('строка'.capitalize())

# делает первуб букву прописной у каждого слова
print('строка строка строка'.title())

# получение кода символа по самому символу
print(ord('П'))

# получение символа по его коду
print(chr(1055))

# метод find ищет подстроку в строке и возвращает номер позиции с которой начинается вхождение, если не находит, то возвращает -1
# дополнительно можно указать границы поиска (от какого по счету, начиная с 0 и и до какого будет искать)
sf = 'пример пример Пример'
print(sf.find('при'), sf.find('При'), sf.find('тест'))
print(sf.find('при', 6), sf.find('при', 0,6), sf.find('при', 7, 12))

# index - аналогичный find метод, но если значение не было найдено, то программа не завершиться - выйдет ошибка
print(sf.index('при'), sf.index('При'))
#print(sf.index('тест')) - выдаст ошибку

# rfind ищет последние вхождение подстроки в строку
print(sf.rfind('при'), sf.rfind('при', 0,5))

# аналогично работает метод rindex
print(sf.rindex('при'), sf.rindex('при', 0,5))

# метод count проверяет кол-во вхождений заданной подстроки в строку
print(sf.count('при'), sf.count('тест'))

# метод startswith проверяет, начинается ли строка с указанной подстроки
print(sf.startswith('при'), sf.startswith('При'))

# метод endswith проверяет, заканчивается ли строка указанной подстрокой
print(sf.endswith('мер'), sf.endswith('при', 3))

# метод replace заменяет все вхождения в подстроке на другую указанную подстроку, при этом можно указать доп параметром максимальное кол-во таких замен
sf4 = 'Петя Вася'
sf4 *= 4
print(sf4.replace('Петя', 'Вася'))
print(sf4.replace('Петя', 'Вася', 2))

































